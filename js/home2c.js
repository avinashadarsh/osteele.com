// Generated by CoffeeScript 1.3.3
(function() {

  $(function() {
    $(".shorten").contractMores();
    $("a:not([title])").setTitlesFromMap(kLinkTitleMap);
    $("img:not([title])").setImageTitles();
    $(".candids img").mouseover(function() {
      return $(this).stop().animate({
        opacity: 1
      });
    }).mouseout(function() {
      return $(this).stop().animate({
        opacity: .75
      });
    });
    0 && $("a:not(.no-link-icon)").live("mouseover", function() {
      return $(this).stop(true).css({
        backgroundColor: "yellow"
      });
    }).live("mouseout", function() {
      return $(this).stop(true).animate({
        backgroundColor: "transparent"
      }, "slow");
    });
    return $("h1 img").mouseover(function(done) {
      var $egg, $this, cycle, large, small;
      $this = $(this);
      $egg = $("h1 iframe");
      small = $this.bounds();
      small.width = small.height = Math.max(small.width, small.height);
      large = {
        left: small.width + $("body").width() - 400,
        top: 20,
        width: 300,
        height: 300
      };
      cycle = $("h1 .caption").crossfader();
      $("h1 img").attr("title", "");
      if ($egg.filter(":visible").length) {
        $(".hide-egg").removeClass("visible");
        large = $egg.bounds();
        $(".candids").show("slow");
        cycle.stop();
        return $egg.css({
          position: "absolute",
          right: "inherit"
        }).css(large).animate(small, function() {
          $egg.hide();
          return done();
        });
      } else {
        $egg.show().css(small).animate(large, function() {
          $egg.css({
            position: "fixed",
            left: "inherit",
            right: 50
          });
          cycle.start();
          return done();
        });
        return $(".candids").hide("slow");
      }
    }).nullifyWhileExecutingK();
  });

  (function($) {
    return $.extend($.fn, {
      bounds: function() {
        if (!this[0]) {
          return null;
        }
        return $.extend(this.offset(), {
          width: this.width(),
          height: this.height()
        });
      },
      contractMores: function() {
        return this.each(function() {
          var $this, contract, expand, html;
          contract = function() {
            $this.html(html.replace(/<!--\s*more\s*-->(.|\s|\n)*/, "<span class=\"more\"></span>"));
            return $this.find(".more").click(expand);
          };
          expand = function() {
            $this.html(html + "<span class=\"less\"></span>");
            return $this.find(".less").click(contract);
          };
          $this = $(this);
          html = $this.html();
          return contract();
        });
      },
      crossfader: function(options) {
        var $es, hangTime, period, transitionTime;
        options = options || {};
        period = options.period || 5000;
        hangTime = options.hangTime || 2000;
        transitionTime = period - hangTime;
        period = (transitionTime + hangTime) * this.length;
        $es = this;
        return {
          start: function() {
            var cycle;
            cycle = function($e) {
              return $e.animate({
                opacity: 1
              }, transitionTime).animate({
                opacity: 1
              }, hangTime).animate({
                opacity: 0
              }, transitionTime).animate({
                opacity: 0
              }, function() {
                return cycle($e);
              });
            };
            return $es.stop(true).css({
              display: "block",
              opacity: 0
            }).each(function(i) {
              return $(this).animate({
                opacity: 0
              }, period * i / $es.length);
            }).each(function() {
              return cycle($(this));
            });
          },
          stop: function() {
            return $es.stop(true).animate({
              opacity: 0
            }, transitionTime / 2);
          }
        };
      },
      setTitlesFromMap: function(map) {
        return this.each(function() {
          var $this, href;
          $this = $(this);
          href = $this.attr("href");
          if (href in map) {
            return $this.attr("title", map[href].replace(/\.\.\./g, "â€¦"));
          } else {
            if (window.location.search.match(/\breport-missing-titles\b/) && window.console && console.info && $.isFunction(console.info)) {
              return console.info("No title entry for ", href);
            }
          }
        });
      },
      setImageTitles: function() {
        return this.each(function() {
          var $this;
          $this = $(this);
          return $this.attr("title", $this.attr("alt"));
        });
      },
      toggling: function(className, onadd, onremove) {
        if (this.hasClass(className)) {
          this.removeClass(className);
          return $.isFunction(onremove) && onremove(this);
        } else {
          this.addClass(className);
          return $.isFunction(onadd) && onadd(this);
        }
      }
    });
  })(jQuery);

  Function.prototype.nullifyWhileExecutingK = function() {
    var fn, guard;
    fn = this;
    guard = false;
    return function() {
      if (guard) {
        return;
      }
      guard = true;
      return fn.call(this, function() {
        return guard = false;
      });
    };
  };

  Function.prototype.serializedK = function() {
    var active, fn, k, pending;
    k = function() {
      var active, ap;
      if (pending.length) {
        ap = pending.shift();
        return fn.apply(ap[0], ap[1]);
      } else {
        return active = false;
      }
    };
    fn = this;
    pending = [];
    active = false;
    return function() {
      var args;
      args = Array.prototype.slice.call(arguments, 0);
      args.unshift(k);
      if (!active) {
        active = true;
        return fn.apply(this, args);
      }
    };
  };

  $(function() {
    return $(".bottom-tab").each(function() {
      var $content, $iframe, $tab, $title, closedCss, closedHeight, duration, loadContent, openCss;
      loadContent = function() {
        return $iframe.attr("src") || $iframe.attr("src", "/projects");
      };
      $tab = $(this);
      $title = $tab.find(".tab-title");
      $content = $tab.find(".content");
      $iframe = $content.find("iframe");
      openCss = {
        top: 5
      };
      closedCss = {
        position: $tab.css("position"),
        top: $tab.css("top"),
        bottom: $tab.css("bottom"),
        zIndex: $tab.css("zIndex")
      };
      closedHeight = void 0;
      duration = 2000;
      return $title.mouseover(function() {
        $tab.hasClass("open") || $tab.stop(true).animate({
          bottom: -2
        });
        return loadContent();
      }).mouseout(function() {
        return $tab.hasClass("open") || $tab.stop(true).animate({
          bottom: closedCss.bottom
        });
      }).click(function(done) {
        return $tab.toggling("open", (function() {
          var y;
          y = $tab.offset().top;
          closedHeight = $tab.height();
          loadContent();
          $content.show();
          return $tab.css({
            position: "fixed",
            top: y,
            bottom: "inherit",
            zIndex: 100
          }).animate(openCss, duration, done);
        }), function() {
          var y;
          y = $(window).height() - closedHeight - parseInt(closedCss.bottom, 10);
          $tab.css(closedCss);
          $content.hide();
          done();
          return;
          return $tab.animate({
            top: y
          }, duration, function() {
            $tab.css(closedCss);
            $content.hide();
            return done();
          });
        });
      }).nullifyWhileExecutingK();
    });
  });

  $(function() {
    var name;
    name = $("title").text().match(/(.+?)(?=\s+HTML)/)[0];
    $("#person-controls .p").mouseover(function(k) {
      var $b, $this, $title, className, p, setPersonClass;
      setPersonClass = function(className) {
        $("body").removeClass("person-1 person-2 person-3").addClass(className);
        $("#person-controls div").removeClass("selected");
        $this.addClass("selected");
        return $title.text($title.text().replace(/(.+?)(?=\s+HTML)/, {
          1: "My",
          2: "Your",
          3: name
        }, [
          {
            p: p
          }
        ]));
      };
      $this = $(this);
      $title = $("title");
      p = parseInt($this.text());
      className = "person-" + p;
      if ($("body").hasClass(className)) {
        return;
      }
      $b = $("<div/>").css($.extend({
        position: "absolute",
        background: "blue",
        zIndex: 5,
        opacity: .5
      }, $this.bounds())).appendTo("body");
      return $b.animate({
        left: 0,
        top: 0,
        width: $(window).width() - 1,
        height: $(window).height() - 1,
        opacity: 0
      }, function() {
        $b.remove();
        setPersonClass(className);
        return $(".ego").stop().css("backgroundColor", "#88f").animate({
          backgroundColor: "white"
        }, function() {
          return $(this).css("backgroundColor", "inherit");
        });
      });
    }).each(function() {
      var $this, t;
      $this = $(this);
      t = $this.text();
      return $this.attr("title", "Change the page text to " + t + " person.");
    });
    return $("p").personalize({
      fullName: "Oliver Steele",
      gender: "m"
    });
  });

  (function($) {
    var person, person1, person2;
    person = function(str, person, map) {
      var applyMap;
      applyMap = function(smap) {
        var re;
        re = map.expand(/\b((?:firstName(?:\s+lastName)?)|He|he)(?:\s+(is|was))?\b/g);
        return str.replace(re, function(_, s, v) {
          return smap.He + (v in smap ? " " + smap[v] : v || "");
        }).replace(/\bHis\b/, smap.His).replace(/\bhis\b/, smap.his);
      };
      switch (person) {
        case 1:
          return applyMap(person1);
        case 2:
          return applyMap(person2);
        case 3:
          return str.replace(map.expand(/firstName(?:\s+lastName)?/g), "He");
      }
    };
    $.fn.personalize = function(options) {
      var gender_extensions, map, names, re, sel;
      options = $.extend({}, options);
      if (options.fullName) {
        names = options.fullName.match(/(.+?)\s+(.+)/);
        $.extend(options, {
          firstName: names[1],
          lastName: names[2]
        });
      }
      map = $.extend({}, options);
      gender_extensions = options.gender.match(/^m/i) ? {
        he: "he",
        his: "his"
      } : {
        he: "she",
        his: "her"
      };
      $.extend(map, gender_extensions);
      $.extend(map, {
        He: map.he.capitalize(),
        His: map.his.capitalize(),
        expand: function(s) {
          if (s instanceof RegExp) {
            return eval(this.expand(s.toString()));
          }
          return s.replace(/\b(firstName|lastName|he|his|He|His)\b/g, function(_, s) {
            return map[s];
          });
        }
      });
      sel = map.expand("*:contains(firstName), *:contains(he), *:contains(his)");
      re = map.expand(/\b((firstName(\s+lastName)?|He|he)(\s+(is|was))?|His|his)\b/g);
      return this.filter(sel).each(function() {
        var $this;
        $this = $(this);
        return $this.html($this.html().replace(re, function(_, s) {
          return "<span class=\"ego\">" + "<span class=\"person-1\">" + person(s, 1, map) + "</span>" + "<span class=\"person-2\">" + person(s, 2, map) + "</span>" + "<span class=\"person-3\">" + s + " </span>" + "</span>";
        }));
      });
    };
    person1 = {
      He: "I",
      is: "am",
      was: "was",
      His: "My",
      his: "my"
    };
    person2 = {
      He: "You",
      is: "are",
      was: "were",
      His: "Your",
      his: "your"
    };
    if (!String.prototype.capitalize) {
      return String.prototype.capitalize = function() {
        return this.slice(0, 1).toUpperCase() + this.slice(1);
      };
    }
  })(jQuery);

}).call(this);
