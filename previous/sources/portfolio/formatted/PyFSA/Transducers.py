<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<TITLE>Transducers.py</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#1F00FF" ALINK="#FF0000" VLINK="#9900DD">
<A NAME="top">
<A NAME="file1">
<H1>PyFSA/Transducers.py</H1>

<PRE>
<FONT COLOR="#BC8F8F"><B>&quot;&quot;&quot;* Transducers0 epsilon? any.#. beginning or end of string%x, &quot;x&quot; character x&quot;\n&quot;, &quot;\t&quot;(A) optionality[] empty string?* universalA - B complementA .x. B cross productA .o. B composition** new operators$A = [?* A ?*] # containmentA =&gt; B _ C     # context restriction  = [ ~[ [~[?* B] A ?*] | [?* A  ~[C ?*]] ]]A -&gt; B   [ [ ~$[A - []] [A .x. B]]*  ~$[A - []]]	# replacement&quot;&quot;&quot;</FONT></B><B><FONT COLOR="#A020F0">from</FONT></B>  FSA <B><FONT COLOR="#A020F0">import</FONT></B> *<B><FONT COLOR="#A020F0">from</FONT></B> types <B><FONT COLOR="#A020F0">import</FONT></B> TupleType<B><FONT COLOR="#A020F0">class</FONT></B> TransducerLabel:	<B><FONT COLOR="#A020F0">def</FONT></B> <B><FONT COLOR="#0000FF">__init__</FONT></B>(self, upper, lower):		self.upper = upper		self.lower = lower		<B><FONT COLOR="#A020F0">def</FONT></B> <B><FONT COLOR="#0000FF">complement</FONT></B>(self):		<B><FONT COLOR="#A020F0">if</FONT></B> self.upper <B><FONT COLOR="#A020F0">and</FONT></B> self.lower:			<B><FONT COLOR="#A020F0">return</FONT></B> [TransducerLabel(labelComplement(self.upper, None), ANY), TransducerLabel(ANY, labelComplement(self.lower, None))]		<B><FONT COLOR="#A020F0">elif</FONT></B> self.upper:			<B><FONT COLOR="#A020F0">return</FONT></B> TransducerLabel(labelComplement(self.upper), self.lower)		<B><FONT COLOR="#A020F0">else</FONT></B>:			<B><FONT COLOR="#A020F0">return</FONT></B> TransducerLabel(self.upper, labelComplement(self.lower))		<B><FONT COLOR="#A020F0">def</FONT></B> <B><FONT COLOR="#0000FF">__repr__</FONT></B>(self):		<B><FONT COLOR="#A020F0">return</FONT></B> (self.upper <B><FONT COLOR="#A020F0">and</FONT></B> str(self.upper) <B><FONT COLOR="#A020F0">or</FONT></B> <FONT COLOR="#BC8F8F"><B>'0'</FONT></B>) + <FONT COLOR="#BC8F8F"><B>':'</FONT></B> + (self.lower <B><FONT COLOR="#A020F0">and</FONT></B> str(self.lower) <B><FONT COLOR="#A020F0">or</FONT></B> <FONT COLOR="#BC8F8F"><B>'0'</FONT></B>)<B><FONT COLOR="#A020F0">def</FONT></B> <B><FONT COLOR="#0000FF">compose</FONT></B>(a, b):	states0, alpha0, transitions0, start0, finals0 = a.tuple()	states1, alpha1, transitions1, start1, finals1 = b.tuple()	states, index = [(start0, start1)], 0	transitions = []	<B><FONT COLOR="#A020F0">while</FONT></B> index &lt; len(states):		state, index = states[index], index + 1		upperSource, lowerSource = state		<B><FONT COLOR="#A020F0">for</FONT></B> _, upperTarget, upperLabel <B><FONT COLOR="#A020F0">in</FONT></B> a.transitionsFrom(upperSource):			<B><FONT COLOR="#A020F0">if</FONT></B> labelLower(upperLabel) <B><FONT COLOR="#A020F0">is</FONT></B> None:				target = (upperTarget, lowerSource)				<B><FONT COLOR="#A020F0">if</FONT></B> target <B><FONT COLOR="#A020F0">not</FONT></B> <B><FONT COLOR="#A020F0">in</FONT></B> states:					states.append(target)				transitions.append((state, target, upperLabel))			<B><FONT COLOR="#A020F0">else</FONT></B>:				<B><FONT COLOR="#A020F0">for</FONT></B> _, lowerTarget, lowerLabel <B><FONT COLOR="#A020F0">in</FONT></B> b.transitionsFrom(lowerSource):					<B><FONT COLOR="#A020F0">if</FONT></B> labelLower(upperLabel) == labelUpper(lowerLabel):						target = (upperTarget, lowerTarget)						<B><FONT COLOR="#A020F0">if</FONT></B> target <B><FONT COLOR="#A020F0">not</FONT></B> <B><FONT COLOR="#A020F0">in</FONT></B> states:							states.append(target)						transitions.append((state, target, makeLabel(labelUpper(upperLabel), labelLower(lowerLabel))))	<B><FONT COLOR="#A020F0">for</FONT></B> _, lowerTarget, lowerLabel <B><FONT COLOR="#A020F0">in</FONT></B> b.transitionsFrom(lowerSource):		<B><FONT COLOR="#A020F0">if</FONT></B> labelUpper(lowerLabel) <B><FONT COLOR="#A020F0">is</FONT></B> None:			target = (upperSource, lowerTarget)			<B><FONT COLOR="#A020F0">if</FONT></B> target <B><FONT COLOR="#A020F0">not</FONT></B> <B><FONT COLOR="#A020F0">in</FONT></B> states:				states.append(target)			transitions.append((state, target, lowerLabel))	finals = filter(<B><FONT COLOR="#A020F0">lambda</FONT></B> (s0, s1), f0=finals0, f1=finals1: s0 <B><FONT COLOR="#A020F0">in</FONT></B> f0 <B><FONT COLOR="#A020F0">and</FONT></B> s1 <B><FONT COLOR="#A020F0">in</FONT></B> f1, states)	<B><FONT COLOR="#A020F0">return</FONT></B> a.create(states, None, transitions, states[0], finals).sorted()<B><FONT COLOR="#A020F0">def</FONT></B> <B><FONT COLOR="#0000FF">labelUpper</FONT></B>(label):	<B><FONT COLOR="#A020F0">return</FONT></B> getattr(label, <FONT COLOR="#BC8F8F"><B>'upper'</FONT></B>, label)	<B><FONT COLOR="#A020F0">if</FONT></B> type(label) <B><FONT COLOR="#A020F0">is</FONT></B> TupleType:		<B><FONT COLOR="#A020F0">return</FONT></B> label[0]	<B><FONT COLOR="#A020F0">else</FONT></B>:		<B><FONT COLOR="#A020F0">return</FONT></B> label<B><FONT COLOR="#A020F0">def</FONT></B> <B><FONT COLOR="#0000FF">labelLower</FONT></B>(label):	<B><FONT COLOR="#A020F0">return</FONT></B> getattr(label, <FONT COLOR="#BC8F8F"><B>'lower'</FONT></B>, label)	<B><FONT COLOR="#A020F0">if</FONT></B> type(label) <B><FONT COLOR="#A020F0">is</FONT></B> TupleType:		<B><FONT COLOR="#A020F0">return</FONT></B> label[1]	<B><FONT COLOR="#A020F0">else</FONT></B>:		<B><FONT COLOR="#A020F0">return</FONT></B> label<B><FONT COLOR="#A020F0">def</FONT></B> <B><FONT COLOR="#0000FF">makeLabel</FONT></B>(upper, lower):	<B><FONT COLOR="#A020F0">if</FONT></B> upper == lower:		<B><FONT COLOR="#A020F0">return</FONT></B> upper	<B><FONT COLOR="#A020F0">return</FONT></B> TransducerLabel(upper, lower)	<B><FONT COLOR="#A020F0">if</FONT></B> upper == lower:		<B><FONT COLOR="#A020F0">return</FONT></B> upper	<B><FONT COLOR="#A020F0">else</FONT></B>:		<B><FONT COLOR="#A020F0">return</FONT></B> (upper, lower)<FONT COLOR="#BC8F8F"><B>&quot;&quot;&quot;from FSA import *print compose(compileRE('ab'), compileRE('ab')).trimmed()print compose(compileRE('ab'), compileRE('a')).trimmed()&quot;&quot;&quot;</FONT></B><B><FONT COLOR="#A020F0">from</FONT></B> REUtils <B><FONT COLOR="#A020F0">import</FONT></B> SymbolRECompiler<B><FONT COLOR="#A020F0">class</FONT></B> TransducerCompiler(SymbolRECompiler):	<B><FONT COLOR="#A020F0">def</FONT></B> <B><FONT COLOR="#0000FF">readCH</FONT></B>(self):		c = self.readChar()		<B><FONT COLOR="#A020F0">if</FONT></B> c == <FONT COLOR="#BC8F8F"><B>'0'</FONT></B>:			<B><FONT COLOR="#A020F0">return</FONT></B> None		<B><FONT COLOR="#A020F0">elif</FONT></B> c == <FONT COLOR="#BC8F8F"><B>'?'</FONT></B>:			<B><FONT COLOR="#A020F0">return</FONT></B> ANY		<B><FONT COLOR="#A020F0">elif</FONT></B> c == <FONT COLOR="#BC8F8F"><B>'%'</FONT></B>:			<B><FONT COLOR="#A020F0">return</FONT></B> self.readChar()		<B><FONT COLOR="#A020F0">elif</FONT></B> c == <FONT COLOR="#BC8F8F"><B>'&quot;'</FONT></B>:			c = self.readChar()			<B><FONT COLOR="#A020F0">if</FONT></B> c == <FONT COLOR="#BC8F8F"><B>'\\'</FONT></B>:				c = self.readChar()				c = {<FONT COLOR="#BC8F8F"><B>'r'</FONT></B>: <FONT COLOR="#BC8F8F"><B>'\r'</FONT></B>, <FONT COLOR="#BC8F8F"><B>'n'</FONT></B>: <FONT COLOR="#BC8F8F"><B>'\n'</FONT></B>, <FONT COLOR="#BC8F8F"><B>'t'</FONT></B>: <FONT COLOR="#BC8F8F"><B>'\t'</FONT></B>}.get(c, c)			<B><FONT COLOR="#A020F0">if</FONT></B> self.readChar() != <FONT COLOR="#BC8F8F"><B>'&quot;'</FONT></B>:				<B><FONT COLOR="#A020F0">raise</FONT></B> <FONT COLOR="#BC8F8F"><B>'\'&quot;\' expected'</FONT></B>		<B><FONT COLOR="#A020F0">else</FONT></B>:			<B><FONT COLOR="#A020F0">return</FONT></B> c		<B><FONT COLOR="#A020F0">def</FONT></B> <B><FONT COLOR="#0000FF">_readNextToken</FONT></B>(self):		c = self.readCH()		<B><FONT COLOR="#A020F0">if</FONT></B> self.peekChar() == <FONT COLOR="#BC8F8F"><B>':'</FONT></B>:			<B><FONT COLOR="#A020F0">return</FONT></B> makeLabel(c, self.readCH())		<B><FONT COLOR="#A020F0">else</FONT></B>:			<B><FONT COLOR="#A020F0">return</FONT></B> c<B><FONT COLOR="#A020F0">def</FONT></B> <B><FONT COLOR="#0000FF">compileTransducer</FONT></B>(str):	<B><FONT COLOR="#A020F0">return</FONT></B> TransducerCompiler(str).toFSA()<FONT COLOR="#BC8F8F"><B>&quot;&quot;&quot;print compileTransducer('ab:cd')print compileTransducer('ab:0d')&quot;&quot;&quot;</FONT></B></PRE>
<HR>
<ADDRESS>Generated by <A HREF="http://www.iki.fi/~mtr/genscript/">GNU enscript 1.6.1</A>.</ADDRESS>
</BODY>
</HTML>
