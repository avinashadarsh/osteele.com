<?php
// $Id: commentmail.module,v 1.12 2007/03/18 12:45:53 jjeff Exp $

define('COMMENTMAIL_DEFAULT_APPROVE', "An unapproved comment has been posted on @site for the post '@node'. You need to publish this comment before it will appear on your site.

IP Address: @host
Name: @user
Email address: @mail
URL: @homepage
Comment:

@comment


Approve this comment: @approval_url
Delete this comment: @delete_url
Delete this comment and ban the user: @ban_url

Edit this comment: @edit_url

Comment administration: @admin_url");

define('COMMENTMAIL_DEFAULT_NOTIFY', "A new comment has been posted on @site for the post '@node'.

IP Address: @host
Name: @user
Email address: @mail
URL: @homepage
Comment:

@comment


Delete this comment: @delete_url
Delete this comment and ban the user: @ban_url

View this comment: @view_url
Edit this comment: @edit_url

Comment administration: @admin_url");


/**
 * Implementation of hook_menu()
 */
function commentmail_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $access = user_access('administer comments');
    
    $items[] = array(
      'title' => t('Comment mail'), 
      'path' => 'admin/settings/commentmail',
      'description' => t('Settings for the comment mail module.'),  
      'access' => $access,
      'callback' => 'drupal_get_form',
      'callback arguments' => array('commentmail_admin_settings'),
    );

    $items[] = array(
      'title' => t('Approve comment'),
      'path' => 'comment/approve',
      'access' => $access,
      'callback' => 'drupal_get_form',
      'callback arguments' => array('commentmail_approve'),
      'type' => MENU_CALLBACK,
    );

    $items[] = array(
      'title' => t('Delete comment and ban user'),
      'path' => 'comment/deleteban',
      'access' => $access,
      'callback' => 'drupal_get_form',
      'callback arguments' => array('commentmail_deleteban'),
      'type' => MENU_CALLBACK,
    );
  }

  return $items;
}


/**
 * Implementation of hook_settings()
 */
function commentmail_admin_settings() {
  $form['commentmail_to'] = array(
    '#type' => 'textfield',
    '#title' => t('Send to'),
    '#default_value' => variable_get('commentmail_to', variable_get('site_mail', '')),
    '#description' => t('A mail message will be sent here when new comments are posted to the site. Separate multiple addresses with a comma.')
  );

  $form['commentmail_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Send mail for'),
    '#default_value' => variable_get('commentmail_mode', 'approval'),
    '#options' => array(
      'all' => t('all new comments'),
      'approval' => t('just comments needing approval'),
      'disable' => t('none (disabled)'),      
    ),
  );
  
  $placeholders = t("The following placeholders are available:
<dl>
  <dt>@site</dt>
  <dd>The name of your site.</dd>
  
  <dt>@node</dt>
  <dd>The title of the post this comment was submitted for.</dd>
  
  <dt>@approval_url</dt>
  <dd>The address the recipient can visit to publish the comment.</dd>
  
  <dt>@delete_url</dt>
  <dd>The address the recipient can visit to delete the comment.</dd>
  
  <dt>@ban_url</dt>
  <dd>The address the recipient can visit to delete the comment and ban the user who submitted the comment.</dd>
  
  <dt>@edit_url</dt>
  <dd>The address the recipient can visit to edit the comment.</dd>
  
  <dt>@view_url</dt>
  <dd>The address the recipient can visit to view the comment.</dd>
  
  <dt>@admin_url</dt>
  <dd>The address of the comment moderation.</dd>
  
  <dt>@queue_url</dt>
  <dd>The address of the comment moderation approval queue.</dd>
  
  <dt>@host</dt>
  <dd>The host name of the user who submitted the comment.</dd>
  
  <dt>@user</dt>
  <dd>The name of the user who submitted the comment.</dd>
  
  <dt>@mail</dt>
  <dd>The e-mail address of the user who submitted the comment.</dd>
  
  <dt>@homepage</dt>
  <dd>The homepage of the user who submitted the comment.</dd>
  
  <dt>@comment</dt>
  <dd>The actual comment text the user submitted.</dd>");

  $form['commentmail_mail_approve'] = array(
    '#type' => 'textarea',
    '#title' => t('Body text for approval mails'),
    '#default_value' => variable_get('commentmail_mail_approve', t(COMMENTMAIL_DEFAULT_APPROVE)),
    '#description' => $placeholders,
    '#cols' => 60,
    '#rows' => 25,
  );

  $form['commentmail_mail_notify'] = array(
    '#type' => 'textarea',
    '#title' => t('Body text for notification mails'),
    '#default_value' => variable_get('commentmail_mail_notify', t(COMMENTMAIL_DEFAULT_NOTIFY)),
    '#description' => $placeholders,
    '#cols' => 60,
    '#rows' => 25,
  );

  return system_settings_form($form);
}


/**
 * Implementation of hook_comment()
 *
 */
function commentmail_comment($comment, $op) {
  if ($op == 'insert') {
    // Load the real comment object from the database
    $comment_obj = _comment_load($comment['cid']);

    // Decide what to do based on the user's setting
    switch (variable_get('commentmail_mode', 'approval')) {
      // Mails should only be sent for unpublished comments
      case 'approval':
        if ($comment_obj->status == 0) {
          // Don't send a mail because the comment is already published
          break;
        }
        // Fallthrough for unpublished comments
      // Mails should be sent for all new comments, regardless of their status
      case 'all':
        $recipient = variable_get('commentmail_to', variable_get('site_mail', FALSE));

        // Only send a mail if a recipient has been specified
        if ($recipient) {
          // Load the node to get the title
          $node = node_load($comment_obj->nid);

          if ($comment_obj->status == COMMENT_NOT_PUBLISHED) {
            $text = variable_get('commentmail_mail_approve', t(COMMENTMAIL_DEFAULT_APPROVE));
          }
          else {
            $text = variable_get('commentmail_mail_notify', t(COMMENTMAIL_DEFAULT_NOTIFY));
          }

          // If the user is logged in, 
          if ($comment_obj->uid) {
            $account = user_load(array('uid' => $comment_obj->uid));
            $comment_obj->mail = $account->mail;
            $comment_obj->homepage = $account->homepage;
          }

          $body = strtr($text, array(
            '@site' => variable_get('site_name', 'Drupal'),
            '@node' => $node->title,
            '@approval_url' => url('comment/approve/'. $comment_obj->cid, NULL, NULL, TRUE),
            '@delete_url' => url('comment/delete/'. $comment_obj->cid, NULL, NULL, TRUE),
            '@ban_url' => url('comment/deleteban/'. $comment_obj->cid, NULL, NULL, TRUE),
            '@edit_url' => url('comment/edit/'. $comment_obj->cid, NULL, NULL, TRUE),
            '@queue_url' => url('admin/comment/list/approval', NULL, NULL, TRUE),
            '@view_url' => url('node/'. $node->nid, NULL, 'comment-'. $comment_obj->cid, TRUE),
            '@admin_url' => url('admin/content/comment', NULL, NULL, TRUE),
            '@host' => $comment_obj->hostname,
            '@user' => $comment_obj->name,
            '@mail' => $comment_obj->mail,
            '@homepage' => $comment_obj->homepage,
            '@comment' => $comment_obj->comment,
          ));

          drupal_mail(
            'commentmail-notify-'. $comment_obj->cid,
            $recipient,
            t('[@site] New Comment posted on "@title"', array('@title' => check_plain($node->title), '@site' => variable_get('site_name', 'Drupal'))),
            $body,
            variable_get('site_mail', NULL)
          );
        }
        else {
          watchdog('commentmail', t('Site mail address is not configured.'), WATCHDOG_ERROR);
        }
    }
  }
}



function commentmail_approve($cid) {
  if ($comment = _comment_load($cid)) {
    if ($comment->status == COMMENT_NOT_PUBLISHED) {
       return confirm_form(
          array('cid' => array('#type' => 'value', '#value' => $comment->cid)),
          t('Are you sure you want to approve the comment %title?', array('%title' => $comment->subject)),
          array('path' => 'node/'. $comment->nid, 'fragment' => 'comment-'. $comment->cid),
          t('The comment will be visible to all users.'),
          t('Approve'),
          t('Cancel')
        );
    }
    else {
      drupal_set_message(t('The comment is already published.'));
      drupal_goto('node/'. $comment->nid, NULL, 'comment-'. $comment->cid);
    }
  }
  else {
    drupal_set_message(t('The comment no longer exists.'));
  }
}

function commentmail_approve_submit($form_id, $form_values) {
  $comment = _comment_load($form_values['cid']);
  $comment->status = 0;

  if (comment_save((array)$comment)) {
    // link to comment on page
    drupal_set_message(t('The comment has been approved.'));
    drupal_goto('node/'. $comment->nid, NULL, 'comment-'. $comment->cid);
  }
  else {
    return t('There was an error during the comment approving process.');
  }
}



function commentmail_deleteban($cid) {
  if ($comment = _comment_load($cid)) {
    return confirm_form(
        array('cid' => array('#type' => 'value', '#value' => $comment->cid)),
        t('Are you sure you want to delete the comment %title and ban its author?', array('%title' => $comment->subject)),
        array('path' => 'node/'. $comment->nid, 'fragment' => 'comment-'. $comment->cid),
        t('Any replies to this comment will be lost. This action cannot be undone. In addition, the author of the comment is no longer allowed to post comments on your site.'),
        t('Delete and ban'),
        t('Cancel')
      );
  }
  else {
    drupal_set_message(t('The comment no longer exists.'));
  }
}


function commentmail_deleteban_submit($form_id, $form_values) {
  $comment = _comment_load($form_values['cid']);

  // Delete comment and its replies.
  _comment_delete_thread($comment);
  _comment_update_node_statistics($comment->nid);

  drupal_set_message(t('The comment and all its replies have been deleted.'));

  // Clear the cache so an anonymous user sees that his comment was deleted.
  cache_clear_all();

  // Now, ban the user
  $aid = db_next_id('{access}_aid');
  db_query("INSERT INTO {access} (aid, mask, type, status) VALUES ('%s', '%s', 'host', 0)", $aid, $comment->hostname);

  drupal_set_message(t('The host %host has been banned.', array('%host' => $comment->hostname)));

  drupal_goto('node/'. $comment->nid);
}
