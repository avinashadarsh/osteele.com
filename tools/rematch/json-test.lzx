<!--
Copyright 2006 Oliver Steele.  Some rights reserved.

This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 2.5 License:
http://creativecommons.org/licenses/by-nc-sa/2.5/.
-->

<canvas>
  <include href="lzunit"/>
  <script src="json.js"/>
  <script src="json-test-data.js"/>
  
  <TestSuite>
    <TestCase>
      <method name="testEncodings"><![CDATA[
	for (var i = 0; i < twoWayTests.length; ) {
	  var expr = twoWayTests[i++];
	  var str = twoWayTests[i++];
	  assertEquals(str, JSON.stringify(expr));
	}
      ]]></method>
      
      <method name="testDecodings"><![CDATA[
	for (var i = 0; i < twoWayTests.length; ) {
	  var expr = twoWayTests[i++];
	  var str = twoWayTests[i++];
	  assertEquivalent(expr, JSON.parse(str));
	}
	for (var i = 0; i < decodingTests.length; ) {
	  var str = decodingTests[i++];
	  var expr = decodingTests[i++];
	  assertEquivalent(expr, JSON.parse(str));
	}
      ]]></method>
      
      <method name="testWhitespaceDecodings"><![CDATA[
	for (var i = 0; i < whitespaceTests.length; ) {
	  var str = whitespaceTests[i++];
	  var expr = whitespaceTests[i++];
	  assertEquivalent(expr, JSON.parse(str));
	}
      ]]></method>
      
      <method name="testInvalidEncodings"><![CDATA[
	for (var i = 0; i < invalidEncodingTests.length; ) {
	  var str = invalidEncodingTests[i++];
	  assertEquals(undefined, JSON.parse(str));
	}
      ]]></method>
      
      <method name="testEquivalent" args="a1, a2">
        if (a1 == a2) return true;
        if (typeof a1 != typeof a2) return false;
        if (typeof a1 != 'object') return false;
        if (a1.constructor != a2.constructor) return false;
        for (var i in a1)
          if (a1[i] != a2[i]) return false;
        for (var i in a2)
          if (a1[i] != a2[i]) return false;
        return true;
      </method>
      
      <method name="assertEquivalent" args="expected, actual, message">
        if (!testEquivalent(expected, actual)) {
          this.fail(format(jsTrue(message) ? message :  "Equivalent", expected, actual));
        }
        canvas.setAttribute('runTests', canvas.runTests + 1)
      </method>
    </TestCase>
  </TestSuite>
</canvas>