<canvas title="reMatch" proxied="false" layout="axis: y">
  <include href="rpc/ajax.lzx"/>
  <include href="graphview.lzx"/>
  <include href="stateview.lzx"/>
  <script src="json.js"/>
  
  <class name="fsaVisualizer">
    <attribute name="text" type="text"/>
    <text name="label" text="${parent.text}" fontsize="18" fontstyle="bold" resize="true" y="-25"/>
    <graphview name="graphView"/>
    <fsaStateDisplayManager name="stateView"/>
    <method name="setup" args="graph, model">
      graph.start = graph.nodes[model.initialState];
      graph.terminalNodes = model.finalStates;
      graphView.drawGraph(graph);
      stateView.graph = graph;
      stateView.model = model;
    </method>
  </class>
  
  <attribute name="editing" value="false"/>
  <attribute name="pattern" type="string" value="(a*b)|(b*a)"/>
  <vbox width="${canvas.width-this.x}">
    <hbox fontsize="18">
      <text><b>Pattern</b></text>
      <view>
	<hbox width="300" visible="${!canvas.editing}"
	      focusable="true"
	      onclick="canvas.setAttribute('editing', true);
		       patternField.setText(canvas.pattern);
		       LzFocus.setFocus(patternField)">
	  <text fontsize="12" y="5">(<u><font color="#0000ff">edit</font></u>)</text>
	  <text><b>:</b></text>
	  <text resize="true" text="${canvas.pattern}"/>
	</hbox>
	<hbox visible="${canvas.editing}">
	  <text><b>:</b></text>
	  <edittext id="patternField" width="200">
	    <method event="onkeyup" args="k">
	      if (k == 13) {canvas.setAttribute('editing', false); canvas.setAttribute('pattern', patternField.getText()); _root.setPattern(patternField.getText());}
	      if (k == 27) {canvas.setAttribute('editing', false);}
	    </method>
	  </edittext>
	  <button fontsize="12"
		  onclick="canvas.setAttribute('editing', false);
			   canvas.setAttribute('pattern', patternField.getText());
			   setPattern(patternField.getText())">
	    Set
	  </button>
	  <button fontsize="12"
		  onclick="canvas.setAttribute('editing', false)">Cancel</button>
	</hbox>
      </view>
      <text><b>Text:</b></text>
      <text id="patter" width="300" focusable="true" bgcolor="#aaf">
	<attribute name="backing" type="string" value="a"/>
	<method event="onclick">
	  LzFocus.setFocus(this);
	</method>
	<method name="resetColors"><![CDATA[
	    var s = backing;
	    resetStates();
	    str = '';
	    for (var i = 0; i < s.length; i++) {
	      var c = s.charAt(i);
	      var solid = advanceStates(c);
	      str += '<font color="'+long2css(solid)+'">' + c + "</font>";
	    }
	    this.rendered = str;
	    setText(str + '|');
	  ]]></method>
	  <method event="onkeyup" args="e"><![CDATA[
	    var s = backing;
	    if (e == 8) {
	      if (s) {
	        s = this.backing = s.slice(0, s.length-1);
	      }
	      resetColors();
	      return;
	    }
	    if (e < 32) return;
	    var c = String.fromCharCode(e)
	    if (!LzKeys.downKeysHash[16]) c = c.toLowerCase();
	    backing += c;
	    var solid = advanceStates(c, 500);
	    var str = this.rendered += '<font color="'+long2css(solid)+'">' + c + "</font>";
	    setText(str + '|');
	  ]]></method>
	</text>
    </hbox>
    <view height="15"/>
    <text width="100%" multiline="true"><b>Instructions</b>: Click on the colored rectangle above and type some text.  The text will be matched against the regular expression in the "pattern" box.</text>
    <text width="100%" multiline="true">The regular expression engine accepts *, ?, (), |, and character ranges ([ab], [a-c], [^ab]).  It doesn't know about anchors, assertions, non-greedy and bounded qualifiers, collation elements, or backreferences.</text>
    <view height="15"/>
  </vbox>
  
  <view height="20"/>
  <fsaVisualizer id="nfaView" text="Nondeterministic Finite State Automaton"/>
  <view height="50"/>
  <fsaVisualizer id="dfaView" text="Deterministic Finite State Automaton"/>
  
  <script><![CDATA[
    var host = 'osteele.dev';
    var initialRequest = true;
    if (_root['source'] == 'server') host = 'osteele.com';
    function setPattern(pattern) {
      var url="http://"+host+"/tools/rematch/server.py?pattern="+LzBrowser.urlEscape(pattern);
      Debug.write(url);
      var req = new XMLHttpRequest();
      req.onreadystatechange = processReqChange;
      req.open("GET", url, true);
      req.send(null);
      scrim.setVisible(true);
    }
    function processReqChange(request) {
      if (request.readyState == 4) {
        scrim.setVisible(false);
        if (request.status == 200) {
          gText = request.responseText;
          var result = gResult = JSON.parse(request.responseText);
          //fsaView.drawGraph(result.fsa);
          var model = gModel = result.dfa.model;
          var graph = result.dfa.graph;
          nfaView.setup(result.nfa.graph, result.nfa.model);
          dfaView.setup(graph, model);
	  resetStates();
	  patter.resetColors();
          LzFocus.setFocus(patter);
        }
      }
    }
    function arrayIncludes(ar, n) {
      for (var i = 0; i < ar.length; i++)
        if (ar[i] == n) return true;
      return false;
    }
    function arrayCompact(ar) {
      var dst = 0;
      for (var i = 0; i < ar.length; i++) {
        ar[dst] = ar[i];
        if (ar[i] != null) dst++;
      }
      ar.length = dst;
    }
    function translateGraph(graph, dx) {
      for (var i in graph.nodes)
        graph.nodes[i].x += dx;
      for (var i in graph.edges) {
        var e = graph.edges[i];
	e.endArrow.x += dx;
	for (var j in e.pos)
	  e.pos[j].x += dx;
      }
    }
    var FSA = function (states, initialState, transitions, finalStates) {
      this.states = states;
      this.initialState = initialState;
      this.transitions = transitions;
      this.finalStates = finalStates;
    }
    function resetStates() {
      nfaView.stateView.setStates([gModel.initialState]);
      dfaView.stateView.setStates([gModel.initialState]);
      gStates = [gModel.initialState];
    }
    function advanceStates(input, duration) {
      nfaView.stateView.advanceStates(input, duration);
      dfaView.stateView.advanceStates(input, duration);
      var states = [];
      for (var i in gStates) {
        var s = gStates[i];
	for (var j in gModel.transitions) {
	  var t = gModel.transitions[j];
	  if (t.start == s && t.edge.indexOf(input) >= 0)
	    if (!arrayIncludes(states, t.end))
	      states.push(t.end);
	  }
      }
      gStates = states;
      var color = 0xffdddd;
      var solid = 0xff0000;
      if (gStates.length) {
        color = inFinalState() ? 0xddffdd : 0xddddff;
	solid = inFinalState() ? 0x006600 : 0x000088;
      }
      patter.setAttribute('bgcolor', color);
      return solid;
    }
    function inFinalState() {
      for (var i in gStates)
        if (arrayIncludes(gModel.finalStates, gStates[i]))
	  return true;
    }
    function long2css(n) {
      var a = "0123456789ABCDEF";
      var s = '#';
      for (var i = 24; (i -= 4) >= 0; )
        s += a.charAt((n>>i) & 0xf);
      return s;
    }
  ]]></script>
  
  <view id="scrim" opacity="0.75" bgcolor="black"
	width="100%" height="100%" options="ignorelayout">
    <text fontsize="24" align="center" y="33%" bgcolor="gray">Calculating...</text>
  </view>
  
  <hbox valign="bottom" options="ignorelayout">
    <text>Copyright 2006 by <a href="http://osteele.com" target="_blank"><font color="#0000ff"><u>Oliver Steele</u></font></a>.  All rights reserved.</text>
  </hbox>

  <script>
    setPattern(canvas.pattern);
  </script>
  
</canvas>
