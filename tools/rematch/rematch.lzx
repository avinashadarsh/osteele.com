<canvas title="reMatch" proxied="false" layout="axis: y">
  <include href="rpc/ajax.lzx"/>
  <script src="utils.js"/>
  <script src="json.js"/>
  <script src="bezier.js"/>
  <script src="paths.js"/>
  <include href="graphview.lzx"/>
  <include href="stateview.lzx"/>
  <include href="inputfield.lzx"/>
  
  <attribute name="editing" value="false"/>
  <attribute name="showInstructions" value="true"/>
  <attribute name="pattern" type="string" value="a*b|b*a"/>
  <attribute name="errorString" value="null"/>
  
  <class name="fsaVisualizer">
    <attribute name="text" type="text"/>
    <text name="label" text="${parent.text}" fontsize="18" fontstyle="bold" resize="true" y="-25"/>
    <graphview name="graphView"/>
    <fsaStateDisplayManager name="stateView"/>
    <method name="setup" args="graph, model">
      graph.start = graph.nodes[model.initialState];
      graph.terminalNodes = model.finalStates;
      graphView.drawGraph(graph);
      stateView.graph = graph;
      stateView.model = model;
    </method>
  </class>
  
  <class name="example"
	 onclick="canvas.setAttribute('editing', false); setPattern(text);">
    <attribute name="text" type="text"/>
    <text name="tv" resize="true" text="${parent.text}"
	  bgcolor="#fcc"/>
  </class>
  
  <vbox width="${canvas.width-this.x}">
    <hbox fontsize="18">
      <text><b>Pattern</b></text>
      <view>
	<hbox width="300" visible="${!canvas.editing}"
	      focusable="true"
	      onclick="canvas.setAttribute('editing', true);
		       patternField.setText(canvas.pattern);
		       LzFocus.setFocus(patternField)">
	  <text fontsize="12" y="5">(<u><font color="#0000ff">edit</font></u>)</text>
	  <text><b>:</b></text>
	  <text id="patternDisplay" resize="true" text="${canvas.pattern}"/>
	</hbox>
	<hbox visible="${canvas.editing}">
	  <text><b>:</b></text>
	  <edittext id="patternField" width="200">
	    <method event="onkeyup" args="k">
	      if (k == 13) {canvas.setAttribute('editing', false); _root.setPattern(patternField.getText());}
	      if (k == 27) {canvas.setAttribute('editing', false);}
	    </method>
	  </edittext>
	  <button fontsize="12"
		  onclick="canvas.setAttribute('editing', false);
			   canvas.setAttribute('pattern', patternField.getText());
			   setPattern(patternField.getText())">
	    Set
	  </button>
	  <button fontsize="12"
		  onclick="canvas.setAttribute('editing', false)">Cancel</button>
	</hbox>
      </view>
      <text><b>Input:</b></text>
      <inputfield id="patter" width="300"/>
    </hbox>
    
    <view height="5"/>
    <text visible="${!canvas.showInstructions}" height="25">
      <b>Instructions</b>: (<a href="asfunction:_root.showInstructions,true"><u><font color="#0000ff">show</font></u></a>)
    </text>
    <include href="instructions.lzx"/>
  </vbox>
  
  <vbox visible="${!canvas.errorString}">
    <view height="20"/>
    <fsaVisualizer id="nfaView" text="Nondeterministic Finite State Automaton"/>
    <view height="50"/>
    <fsaVisualizer id="dfaView" text="Deterministic Finite State Automaton"/>
  </vbox>
  
  <view width="100%">
    <text visible="${canvas.errorString}" text="${canvas.errorString}"
          fontsize="24" align="center" resize="true" fgcolor="red"/>
  </view>
  
  <script><![CDATA[
    function showInstructions(flag) {
      canvas.setAttribute('showInstructions', flag == 'true');}
    var host = 'osteele.dev';
    if (_root['source'] == 'server') host = 'osteele.com';
    function setPattern(pattern) {
      canvas.setAttribute('pattern', pattern);
      var url="http://"+host+"/tools/rematch/server.py?pattern="+LzBrowser.urlEscape(pattern);
      var req = new XMLHttpRequest();
      req.onreadystatechange = processReqChange;
      req.open("GET", url, true);
      req.send(null);
      scrim.setVisible(true);
    }
    function processReqChange(request) {
      if (request.readyState == 4) {
        scrim.setVisible(false);
        if (request.status == 200) {
          gText = request.responseText;
          var result = gResult = JSON.parse(request.responseText);
          if (typeof result == 'string') {
            canvas.setAttribute('errorString', result);
            return;
          }
          canvas.setAttribute('errorString', null);
	  // use the dfa as the model, since it has the metadata
          gModel = result.dfa.model;
          nfaView.setup(result.nfa.graph, result.nfa.model);
          if(dodfa) dfaView.setup(result.dfa.graph, result.dfa.model);
	  patter.replay();
          LzFocus.setFocus(patter);
        }
      }
    }
    var FSA = function (states, initialState, transitions, finalStates) {
      this.states = states;
      this.initialState = initialState;
      this.transitions = transitions;
      this.finalStates = finalStates;
    }
    function resetStates() {
      nfaView.stateView.setStates([gModel.initialState]);
      if(dodfa) dfaView.stateView.setStates([gModel.initialState]);
      gStates = [gModel.initialState];
      patternDisplay.setText(getMangledPattern());
    }
    function advanceStates(input, duration) {
      nfaView.stateView.advanceStates(input, duration);
      if(dodfa) dfaView.stateView.advanceStates(input, duration);
      var states = [];
      for (var i in gStates) {
        var s = gStates[i];
	for (var j in gModel.transitions) {
	  var t = gModel.transitions[j];
	  if (t.start == s && t.edge.indexOf(input) >= 0)
	    if (!Array.includes(states, t.end))
	      states.push(t.end);
	  }
      }
      gStates = states;
      var color = 0xffdddd;
      var solid = 0xff0000;
      if (gStates.length) {
        color = inFinalState() ? 0xddffdd : 0xddddff;
	solid = inFinalState() ? 0x006600 : 0x000088;
      }
      patter.setAttribute('bgcolor', color);
      patternDisplay.setText(getMangledPattern());
      return solid;
    }
    function getPatternPositions() {
      var pos = [];
      for (var i in gStates) {
        var s = gStates[i];
	for (var j in gModel.transitions)
	  if (gModel.transitions[j].start == s)
	    pos = pos.concat(gModel.transitions[j].meta);
      }
      return pos;
    }
    function getMangledPattern() {
      var p = canvas.pattern;
      var s = '';
      var m = {};
      var ns = getPatternPositions();
      for (var i in ns) m[ns[i]] = true;
      for (var i = 0; i < p.length; i++) {
        var c = p.charAt(i);
        c = LzBrowser.xmlEscape(c);
        if (m[i]) {
	  var color = '#0000ff';
          //c = '<font color="'+color+'">' + c + '</font>';
          c = '<u>' + c + '</u>';
          //s += '<font color="#0000ff" size="10"><b>.</b></font>'
	}
	s += c;
      }
      return s;
    }
    function inFinalState() {
      for (var i in gStates)
        if (Array.includes(gModel.finalStates, gStates[i]))
	  return true;
    }
  ]]></script>
  
  <view id="scrim" opacity="0.75" bgcolor="black"
	width="100%" height="100%" options="ignorelayout">
    <text fontsize="24" align="center" y="33%" bgcolor="gray">Calculating...</text>
  </view>
  
  <hbox valign="bottom" options="ignorelayout">
    <text>Copyright 2006 by <a href="http://osteele.com" target="_blank"><font color="#0000ff"><u>Oliver Steele</u></font></a>.  All rights reserved.</text>
  </hbox>

  <script>
    //setPattern(canvas.pattern); // fixme
    setPattern('a*a'); // fixme
    var dodfa = false; //fixme
  </script>
  
</canvas>
